.TH LCWS 3 1-OCT-2023 lcws-manpages
.SH NAME 
lcws_write, lcws_read, lcws_free, lcws_create_from_socket, lcws_create_from_host, lcwss_write, lcwss_read, lcwss_free, lcwss_create_from_SSL lcwss_create_from_host

.SH LIBRARY
Lightweight C WebSocket library (lcws, -llcws)

.SH SYNOPSIS
.nf
.PP
.B "int lcws_write(lcwss_t *socket , lcws_wrreq_t request);"
.B "lcws_buffer_t *lcws_read(lcwss_t *socket);"
.B "void lcws_free(lcws_t *ws);"
.B "lcws_t *lcws_create_from_socket(int socket, const char *host);"
.B "lcws_t *lcws_create_from_host(const char *host, const char *port);"
.B "int lcwss_write(lcwss_t *socket, lcws_wrreq_t request);"
.B "lcws_buffer_t *lcwss_read(lcwss_t *socket);"
.B "void lcwss_free(lcwss_t *ws);"
.B "lcwss_t *lcwss_create_from_SSL(SSL *socket, const char *host);"
.B "lcwss_t *lcwss_create_from_host(const char *host, const char *port, SSL_CTX *ctx);"
.B "void lcws_buffer_free(lcws_buffer_t *buf);"
.PP

.SH DESCRIPTION
.B The functions provided here give access to WebSockets in a relatively simple and lightweight way to interface with these sockets. Intended to provide a more simple way to work with these sockets indepentant of any other external libraries barring openssl when compiled with SSL support.

.B lcws_create_from_socket, lcwss_create_from_SSL, lcws_create_from_host, lcwss_create_from_host. Functions all create lcws_t and lcwss_t websocket structures intended to be passed to websocket read and write functions. They return a pointer to the lcws_t and lcwss_t structures and will return NULL on an error(errno should be set from system calls we call).

.B lcws_read, lcwss_read. Both these functions return a pointer a lcws_buffer_t structure containing the websocket frame opcode, data and other information.

.B lcws_write, lcwss_write. These functions take in a lcws_wrreq_t structure and will write the data provided in that structure to the underlying socket. Applying any rules provided in the write request, e.g. masking the data, setting final or opcode bits, setting length.

.B lcws_free, lcwss_free, lcws_buffer_free. These functions free lcws_t, lcwss_t and lcws_buffer_t structure pointers. These functions return a void aka nothing as they SHOULD NOT FAIL unless you provide a bad pointer. Or a pointer to a type that is not lcws_t or lcwss_t.

.SH RETURN VALUES
.nf
.PP
.B lcws_free(), lcwss_free(), lcws_buffer_free() - returns nothing
.B lcws_write(), lcwss_write() - returns int see below.
.B 	0 = success.
.B 	-1 = error check error no. 

.B lcws_read(), lcwss_read() - returns pointer to lcws_buffer_t:
.B	VALID_PTR = success.
.B	NULL = Error.

.B lcws_create_from_socket(), lcws_create_from_host - Returns a pointer to lcws_t 
.B	VALID_PTR = success.
.B	NULL = Error.

.B lcwss_create_from_SSL(), lcwss_create_from_host - Returns a pointer to lcwss_t 
.B	VALID_PTR = success.
.B	NULL = Error.
.PP

.SH DATA STRUCTURES
.nf
.PP
.B "lcws_wrreq_t is a public data structure intended to be used by client programs using these libraries."
	lcws_wrreq_t {
		bool fin; /*Final part of this message*/
		bool mask; /*data should be masked before it's sent*/
		uint8_t res: 3; /*Reserved extensions*/
		uint8_t opcode: 4; /*Websocket frame opcode*/
		size_t len; /*Length of data field*/
		char *data; /*Data to be written*/
	};

.B "lcws_buffer_t is a public data structure return by lcws_read functions. Containing the data returned by a websocket read."
	typedef struct lcws_buffer {
		bool fin; /*final part of this message*/
		uint8_t opcode; /*Websocket frame opcode*/
		char *data; /*masked data*/
		size_t len; /*length of data*/
		char mask[4]; /*Mask bytes*/
		uint16_t close_code; /*close code set if frame close*/
	} lcws_buffer_t;

.B "lcws_t and lcwss_t is an opaque pointer to a lcws_t websocket data structure intended to be passed to internal library functions client programs should not attempt to dereference it. Instead passing it to functions that take it as an argument"
.SH SEE ALSO
.BR SSL_new(3)
.BR SSL_CTX_new(3)
.BR ssl(7)
